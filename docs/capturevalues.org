* Capture Values

  The Parsing Machine design proposed in the paper by S. Medeiros and
  R. Ierusalimschy cover the matching strategy. Capturing values
  wasn't part of their publication so this document proposes a way of
  achieving that.

  The capture mechanism is aware of the backtracking. The machine
  keeps track of the level of the match and pops intermediary matches
  off the stack to keep the result tree clean when a failure is found.

  The matching function has a stack intended to be used to build a
  tree of results and the VM provides three opcodes to capture values
  within that stack:

  * cap_open: When the match is for a non terminal, it pushes a list
    onto the stack. The list contains the name of the Rule as its only
    element. If it's a terminal, it pushes an empty string onto the
    stack.
  * cap_char: pushes a new character to the string on top of the stack
  * cap_close: Pops the top of the stack and appends that value to the
    new top of the stack.

  The syntax of our extension provides two capture mechanisms: one for
  capturing non-terminals(%) and another one for terminals (%{}). The
  capture operators work for three basic situations:

  | Grammar                | output          |
  |------------------------+-----------------|
  | S <- %A; A <- %{ 'a' } | ('S' ('A' 'a')) |
  | S <- A; A <- %{ 'a' }  | ('S' 'a')       |
  | S <- %{ A }; A <- 'a'  | ('S' 'a')       |
  |------------------------+-----------------|

  Let's use an example to illustrate them:

* Example

  Here's a tiny Grammar for simple assignment expressions that require
  identifiers that start with letters or underscore and the other
  letters can be either letters, underscores or numbers:

  #+begin_src peg
Assignment  <- _ Identifier _ '=' _ Number
Identifier  <- IdentStart IdentCont*
IdentStart  <- [a-zA-Z_]
IdentCont   <- IdentStart / [0-9]
Number      <- [0-9]+
_           <- Space*
Space       <- [ \n\r\t]
  #+end_src

  Here's an example of an input that can be parsed with the above
  Grammar:

  #+begin_src
Num = 42
  #+end_src

  The output initially looks a lil useless because it only captured
  the name of the start rule in the grammar.

#+begin_src lisp
("Assignment")
#+end_src

** Node Capture Operator (~%~)

   You can use the Node Capture Operator (~%~) to capture the nodes
   directly within the start production. Let's rewrite the following
   line
#+begin_src peg
Assignment  <- _ Identifier _ '=' _ Number
#+end_src

   Just like the following
#+begin_src peg
Assignment  <- _ %Identifier _ '=' _ %Number
#+end_src

   That will make the output a lil more interesting and capture the
   intermediary nodes ~Identifier~ and ~Number~:
#+begin_src lisp
("Assignment"
 ("Identifier")
 ("Number"))
#+end_src

** Block Capture Operator (~%{ Expr }~)

   The *Block Capture* Operators purpose is to aggregate Terminal
   matches together. The example we've been using have two situations
   where it could be useful:

   1. The ~Number~ rule could aggregate all its matches under one
      capture instead of one per character:

      #+begin_src peg
Number      <- %{ [0-9]+ }
      #+end_src

      The output of the ~Number~ rule now looks like this:

      #+begin_src lisp
...
("Number" "42")
...
      #+end_src
   2. The ~Identifier~ rule will aggregate all the matches under
      ~IdentStart~ and ~IdentCont~. This case is interesting because
      although neither ~IdentStart~ nor ~IdentCont~ are syntactically
      surrounded by capture operators, but the compiler generate
      ~CAPCHAR~ opcodes after their terminals because they're
      semantically nested:

#+begin_src peg
Identifier  <- %{ IdentStart IdentCont* }
IdentStart  <- [a-zA-Z_]
IdentCont   <- IdentStart / [0-9]
#+end_src

   With changes to ~Number~ and ~Identifier~ the output will look like
   this:

#+begin_src lisp
("Assignment"
 ("Identifier" "Num")
 ("Number" "42"))
#+end_src

** Example Rewritten

   Here's the full Grammar with *Quiet* and *Capture Block* Operators
   in their proper places:

   #+begin_src peg
Assignment  <- _ %Identifier _ '=' _ %Number
Identifier  <- %{ IdentStart IdentCont* }
IdentStart  <- [a-zA-Z_]
IdentCont   <- IdentStart / [0-9]
Number      <- %{ [0-9]+ }
_           <- Space*
Space       <- [ \n\r\t]
   #+end_src

   And here's the final parse tree:

   #+begin_src lisp
("Assignment"
 ("Identifier" "Num")
 ("Number" "42"))
   #+end_src

** Note on verbosity

   Some people like verbose outputs some people don't. The above
   example could also be simplified to output something like
#+begin_src lisp
("Assignment" "Num" "42")
#+end_src

   if we omit the Node Capture operators in the first production.
