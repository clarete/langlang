* Grammars & Compilers

  Each Grammar defined within ~LangLang~ needs to be parsed & compiled
  into a binary form understood by the Parsing Machine. This document
  lists all the Grammars offered and a brief description of their
  functionality.

  | Grammar | Compiler | Status |
  |---------+----------+--------|
  | PEG     | peg.py   | Usable |
  | PEG     | peg.c    | Design |
  | PEGx    | peg.py   | Usable |
  | ABNF    | abnf.c   | Dream  |

** Grammars
*** PEG

    That's the Grammar that comes from Brian Ford's work and that
    motivated this project. It takes exactly what's described in
    Section 2 of Ford's paper. The other Grammars are described with
    ~PEG~.
**** Operators
     |----------------+-----------+------------------------|
     | sequence       | =e1 e2=   |                        |
     | ordered choice | =e1 / e2= |                        |
     | not predicate  | =!e=      |                        |
     | and predicate  | =&e=      | (sugar for =!!e=)      |
     | zero or more   | =e*=      |                        |
     | one or more    | =e+=      | (sugar for =ee*=)      |
     | optional       | =e?=      | (sugar for =&ee / !e=) |
*** PEGx
    This is the Grammar that implements the extensions provided by
    ~LangLang~.
     |-------+------+----------------------------------------------------|
     | Quiet | =;e= | Match =e= but doesn't include it on the parse tree |
** Compilers
*** peg.py
    This is the compiler that takes ~PEG~ strings and outputs the
    binary form understood by the Parsing Machine. In many ways, that's
    the most important Grammar in ~LangLang~. It currently understands
    ~PEG~ and ~PEGx~.
