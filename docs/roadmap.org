* Roadmap
** Structure
   Values marked as DONE might still have unfinished items. They're
   probably good to have but
** Parsing Machine
*** DONE [#A] PEG Semantics
    A summary of what's implemented can be found in the [[./peg.org][Parsing
    Machine]] documentation.
*** DONE [#A] Capture Values in Match
    CLOSED: [2018-09-19 Wed 17:05]
    A summary of what's implemented can be found in the [[./capturevalues.org][Capture Values]]
    documentation.
*** DONE [#A] List Matching
    CLOSED: [2019-01-22 Tue 09:15]
    Besides parsing streams of characters, with very few tweaks, the
    parsing machine can also match lists (and trees). It's described
    more in depth in the article [[http://www.lua.inf.puc-rio.br/publications/mascarenhas11parsing.pdf][Parsing Expression Grammars for]]
    Structured Data]] by F. Mascarenhas, S. Medeiros and
    R. Ierusalimschy.

    The idea is to use that to traverse trees returned by the
    character matching stage and serve as a tool for transforming
    trees.

    One thing that I haven't been able to adapt while writing grammars
    is the dominance of semantic actions over the actual grammar.
    There must be a more readable and modular way of doing this job.

    Some parser generators attach actions via visitor pattern by
    adding the action code to the =AST= node's ~Visit~ method.

*** DOING [#A] Semantic Actions
**** Thoughts

     That could be done either as an API or as an extension to the
     language for grammars.

**** Modular Semantic Actions

     This is interesting. Abstracting Backtracking is a good
     idea. Here's where I found about it (they give some suggestions
     about context sensitive parsers too somewhere in the text)

     A. Warth, P. Dubroy & T. Garnock-Jones - page 2:

     (...)
     In code. The fact that Ohm’s grammars and semantic actions are
     written separately — as in Newspeak’s Executable Grammars [1] —
     leads to more readable grammars, and makes it possible for
     grammars and semantic actions to be extended independently, using
     familiar object-oriented mechanisms. (More on this in Section 4.)
     (...)

     [1] This means that Ohm does not support semantic predicates,
     which results in a small loss of expressiveness, e.g., it is not
     currently possible to write Ohm grammars for context-sensitive
     languages like Python and HTML.

**** Semi-Modular Semantic Actions
***** Take #1
      * Bytecode Format: Add new opcode ~OP_PRIME IDX~.
      * Compiler: ~OP_PRIM~ was experimentally added to the end of
        each production definition. Right before the opcode OP_RETURN.
      * Virtual Machine: ~OP_PRIM~ has the following semantics:
        + It is only parameter is the index of the symbol in the
          symbol table that identifies the primitive being called.
        + It pops the symbol on top of the capture stack, passes it to
          the primitive associated with the symbol at IDX.
        + It is a no-op if the symbol at IDX doesn't have a
          corresponding value in the primitives dictionary.
***** Debriefing #1
      * Tried to improve ~examples/calc~ to be smaller and easier to
        understand and the result was:
        + Too many primitives needed to traverse sub items in the tree
          to get rid of the names of the nodes. That could have been
          fixed by changing the value passed to the primitive. It
          would also have gotten rid of the need for so many ~CADR~
          operations as well. It's interesting to notice that with
          semantic actions we can build the tree without the node
          annotations because we'd receive the name of which primitive
          to call as the parameter to ~OP_PRIM~.
        + Primitives got too verbose too quickly because primitives
          are only executed on the result of an entire
          production. This could have been fixed by adding ~OP_PRIM~
          after top-level ~Choice~ alternatives. It would allow
          writing less code when using the grammars. The downside is
          that there won't be a clear way of naming each alternative
          (Modular Semantic Actions solve that with the case-label
          construct).
      * The Capture system is a little broken. The use of the ~%{ }~
        operator without a balanced use of ~%~ operators can lead to
        type errors that lead to segfaults.
***** Take #2 problems to solve

      * Too much boilerplate code to consume structural nodes and
        perform very simple transformations (e.g.: literals)
        implementing semantic actions outside the grammar in the host
        language.

      * Performing things that take just adding the semantic actions
        in grammars in the host language will clutter the semantic
        actions

      Problem with it is pretty much backtracking. It'd be great to
      either make sure that there's no side effect in the semantic
      action or to provide some sort of error system that would fail
      before semantic actions were executed with chances of
      failing. Look at the error handling article.

      Requirements:

       * The burden of dealing with backtracking should not be left to
         the Grammar author
       * Semantic Actions shouldn't make the PEG less portable
       * Semantic Actions shouldn't clutter the PEG

***** Take #2 plan

      The goal is to allow authors to write grammars with semantic
      actions that will only run on valid input.

      To achieve the aforementioned goal the error handling system
      will have provide assistance to the semantic action mechanism.

      The ~nofail~ semantics of *Error Labels* from [[http://www.inf.puc-rio.br/~roberto/docs/sblp2013-1.pdf][Exception Handling
      for Error Reporting in Parsing Expression Grammars]] will serve as
      a building block for backtracking-safe semantic actions.

      When a Terminal labeled ~ErrX~ is reached during parsing, it
      must be consumed by the parser. Otherwise an exception of the
      type ~ErrX~ will be thrown and parsing aborted.

      That can be achieved with a compiler that can enforce that
      semantic actions can only be declared right after labeled
      expressions. For example:

      #+begin_src peg
      ValidT <- 'a'^err @{ something() } 'b'
      InvalidT <- 'a'^err 'b' @{ primitive() }

      ValidN <- A^err2 @{ primitive() } B
      InvalidN <- A^err2 B @{ primitive() }
      #+end_src

      The labels ~err~ and ~err2~ are the types of labels that the
      above PEG can throw, besides the standard ~fail~ label thrown
      when no label is provided, and doesn't support semantic actions
      because ~fail~ is the label caught by the backtracking.
*** DOING [#A] Error Handling
**** Problem
     There are essentially two things that make error reporting not
     trivial within this parsing system:

     1. The backtracking semantics of the ordered choice puts the
        cursor far away from where the parsing error occurred.

     2. In a handwritten parser or in a generated one, the lexer is
        separated from the parser and can be more comprehensive about
        errors. In our system, the grammar for describing grammars
        doesn't offer any way for the grammar writer to provide error
        messages where they're expected.

**** Suggested Solution

     In the article [[http://www.inf.puc-rio.br/~roberto/docs/sblp2013-1.pdf][Exception Handling for Error Reporting in Parsing
     Expression Grammars]], André Murbach Maidl, Fabio Mascarenhas and
     Roberto Ierusalimschy propose the use of techniques that resemble
     exception handling in programming languages.

**** Implementation

     The error reporting system proposed by the article quoted mention
     or provide a few different tools:

      * *Farthest Failure Position*: This is the heuristics used by
        B. Ford in his implementation of the parser generator
        Pappy. This is simple and already implemented in the `error'
        branch. That gives the *position* where the error happened.

      * *No Fail*: Operator that throws an error label if matching of
        its operand isn't successful.

      * *Error Labels*: It allows implementing specific error messages
        by customizing error labels emitted with the ~nofail~
        operator.

      * *Try* Operator that catches error labels from its operand and
        transforms it into a ~fail~ label.

*** [#B] Left Recursion
*** [#C] Streaming API
**** Problem
     The matching happens totally synchronously and depends on
     previously known lengths that aren't really imposed by the
     abstractions but rather by the current implementation.

     The reading from the grammars file will probably continue to be
     done synchronously related to the reading of the input. That
     means that although the code for reading the both input and
     grammars might use asynchronous functions, reading the grammars
     will most likely block starting to read the input. That's a
     decision that might simplify the implementation assuming that
     grammar files will normally be way smaller than the input files.

     It is desired though to not require loading an entire input file
     into memory to allow matching more data.
**** Solution
     A good solution would primarily look for good interaction with
     the execution of the language virtual machine, which currently
     doesn't exist. In that case, it might either shape the ideas for
     this other system. It'd be nice to be able to receive high level
     streams provided by the language VM.

     As anything else related to the PEG machine, the hardest part to
     integrate with is the backtracking. The stream abstraction must
     be prepared to rewind the cursor, which to might impose a direct
     limitation on how many nested ~CHOICE~ operations the VM will be
     able to performed.

     Suggested Protocol:

     * ~bool nextChar(Stream s, char *c)~: Returns true if a character
       could be read from the stream.
     * ~uint32_t pos(Stream s)~: Returns the current position in the
       stream.
     * ~void rewind(Stream, uint32_t n)~: Rewind the cursor to where
       the backtracking started a ~CHOICE~ operation.

*** [#D] Event API
**** Problem
     The matching currently happens separately from manipulating
** Language Machine
*** [#A] Built-In Value Types
    * [X] Nil
    * [X] Integers
      Currently a boxed ~long int~ value
    * [X] Boolean Currently a boxed ~bool~ value (from ~stdbool.h~)
      with private constructor. Only available instances are ~True~
      and ~False~.
    * [X] List
      Currently an array of ~Object~ pointers
    * [X] Dictionary
      Currently an array of ~Cons~ lists
    * [X] String
      Boxed ~char~ pointer
    * [X] Symbol
    * [ ] Float/Double/Decimal
    * [ ] Integer Array
*** [#B] Language Features
    * Expressions
      * [ ] Arithmetic: Addition/Subtraction/Multiplication/Division/Reminder/Power
      * [ ] Logic: Or/And/Not
      * [ ] Comparison: Equal/Not Equal
      * [ ] Bit Manipulation
      * [ ] Anonymous Function Declaration
      * [ ] Function Call
      * [ ] Asynchronous Function Call
    * Statements
      * [ ] Function Declaration
      * [ ] Return
      * [ ] Conditional
        * [ ] if/else
        * [ ] switch
      * [ ] Loop
        * [ ] while
        * [ ] for
        * [ ] until
        * [ ] each
      * [ ] Assignments
        * [ ] Destructure
      * [ ] Match
      * [ ] Yield/Async/Await
*** [#B] Callable First Class Citizen
    * [ ] Functions: Traditional stack based implementation
    * [ ] Closures: Probably using the ~Upvalue~ method from the Lua
      virtual machine project
    * [ ] Continuations (call/cc)
    * [ ] Grammars
*** [#C] Garbage Collection
    Probably don't want to go with reference counting because of the
    burden of maintaining a separate system for doing that one job
    well is still preferable over manually typing all those pesky
    ~inc/dec()~ calls all over the code. Could start as simple as a
    mark & sweep and evolve to more elaborate solutions over time.
*** [#C] NaN Tagging
** Meta Tools
*** Intermediary Representation
    * [ ] AST
    * [ ] DAG
    * [ ] Control Flow Graph
    * [ ] Static Single Assignment
    * [ ] Call Graph
*** Optimizations
    * [ ] Peephole
    * [ ] Constant Propagation
    * [ ] Copy Propogation
    * [ ] Unreachable Code
* Known Bugs
** TODO List matching capturing is broken for nested choices
   * It should use the same implementation of captures in
     ~mMatch~. The instructions are already there.
     * Only question against this implementation is will that be way
       too many more instructions to be executed?
   * It's on the way of implementing semantic actions
** TODO Memory Management
   Since there are plans to adopt a garbage collection, object
   creation is sort of not managed now. The only thing that requires
   memory allocation in the heap is capturing values. Everything else
   is done on the stack. That might change if the VM stack itself gets
   moved to the heap.
