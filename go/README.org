
* NOTICE: THIS GO IMPLEMENTATION IS DEPRECATED DON'T USE IT

* Development

** Running the gen_go test suite
*** Generate Parsers

First, run the command that takes the grammar files as input and
generate their respective Go implementations:

#+begin_src shell
  go generate ./...
#+end_src

*** Run Tests

Once we have the go parsers generated, we can then run all the tests,
including the ones that depend on these generated parsers:

#+begin_src shell
  go test ./... -v
#+end_src

*** Run Benchmarks

There's also some infrastructure for benchmarking bits and pieces of
the implementation.

Command for running the benchmarks:

#+begin_src shell
  ./rb langlang # currently accepts `langlang` or `import`
#+end_src

This will create a new directory under ~./benches~ with the short SHA
of the current commit and the name of the test suite.  It saves the
following files:

 - ~txt~: text output of the ~go test~ tool to be used by ~benchstat~
 - ~mem.out~: memory profile generated by ~go pprof~
 - ~cpu.out~: CPU profile generated by ~go pprof~

** Running the gen_ts test suite
*** Run tests

The ~gen_ts~ test suite can be ran by simply running

#+begin_src shell
make clean && make test
#+end_src

The `clean` rule will ensure that the Type Script parsers generated by
the build are the freshest, and the rule `test` will ensure that all
parsers get generated again, that all the dependencies for the test harness are installed, and finally kick off the tests themselves.
