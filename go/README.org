* Introduction

Bring your own grammar and get a feature rich parser generated for
different languages.  Main reasons why you might want to use this:

 - Concise input grammar format and intuitive algorithm: generates
   recursive top-down parsers based on Parsing Expression Grammars
 - Error reporting with custom context through failure ~labels~
 - Automatic handling of white spaces, making grammars less cluttered
 - There are plans to extend this library to also allow error recovery

** Currently supported output languages

 * [X] Go Lang
 * [ ] Python
 * [ ] Java Script
 * [ ] Write your own code generator

** Basic Usage

If you just want to test the waters, point the command line utility at
a grammar and pick a language:

#+begin_src bash
go run ./cmd -language go -grammar your-grammar-file.peg
#+end_src

There is an ~examples~ directory within this package.  They contain
some grammar files that can be used as a reference.

* Input Language
** Productions and Expressions

The input grammar is as simple as it can get. It builds off of the
original PEG format, the other features are added conservatively.
Take the following input as an example:

#+begin_src peg
  Production <- Expression
#+end_src

At the left side of the arrow there is an identifier and on the right
side, there is an expression.  These two together are called either
productions or (parsing) rules.  And each production in a grammar is
translated to a function.  Let's go over what's valid in an expression
and how to compose them.  If you've ever seen or used regular
expressions, you've got a head start.

** Terminals

 - *Any* e.g.: ~.~ this matches any character, and only errors if it
   reaches the end of the input

 - *Literal* e.g.: ~'x'~ anything around quotes (single and double
   are the same)

 - *Class and Range* e.g.: ~[0-9]~, ~[a-zA-Z]~, ~[a-f0-9_]~.
   Notice that classes may contain either ranges or single characters.
   The last example contains two ranges (~a-f~ and ~0-9~) and one
   single char (~_~).  It means *match either one of these*. e.g.:
   ~[a-cA-C]~ is translated to ~'a' / 'b' / 'c' / 'A' / 'B' / 'C'~.

** Non-Terminals

The biggest addition of this type of grammar on top of regular
expressions is the ability to define and recursively call productions.
Here's a grammar snippet for parsing numbers:

#+begin_src peg
Signed   <- ('-' / '+') Signed / Decimal
Decimal  <- ([1-9][0-9]*) / '0'
#+end_src

The topmost production ~Signed~ calls itself or the production
~Decimal~.  It allows parsing signed and unsigned numbers
recursively. (e.g.: ~+-+--1~ and so forth would be accepted).

** Expression Composition

The following operators can be used on both Terminals and
Non-Terminals, on top of parenthesized expressions:

| operator         | example   | comment                    |
|------------------+-----------+----------------------------|
| *ordered choice* | =e1 / e2= |                            |
| *not predicate*  | =!e=      |                            |
| *and predicate*  | =&e=      | sugar for =!!e=            |
| *zero or more*   | =e*=      |                            |
| *one or more*    | =e+=      | sugar for =ee*=            |
| *optional*       | =e?=      | sugar for =&ee / !e=       |
| *lexification*   | =#e=      |                            |
| *label*          | =e^label= | sugar for =e/throw(label)= |

*** Ordered Choice

This operator tries expressions one at a time, from left to right, and
stops at the first one to succeed.  Or error if no alternatives work.
E.g.:

#+begin_src peg
SomeDigits <- '0' / '1' / '2' / '3' / '4'
#+end_src

Passing ~6~ to the above expression will generate an error.

*** Predicates (Not/And)

Predicates are the mechanism that allows unlimited look ahead, as they
do not consume any input.  e.g.:

#+begin_src peg
BracketString <- "[" (!"]" .)* "]"
#+end_src

In the above example, the *any* expression isn't evaluated if the
parser finds the closing square bracket.

The *and* predicate (~&~) is just syntactical sugar for ~!!~.

*** Repetition ({Zero,One} Or More)

 * *Zero Or More* it never fails, as it can match its expression at
   least zero times:

 * *One Or More* is the syntax sugar for calling the expression once,
   followed by applying zero or more to the same expression.  It can
   fail at the first time it matches the expression

 * *Optional* it will match an expression zero or one time

*** Lexification

By default, the generated parsers emit code to consume whitespaces
automatically before each item within a sequence of a production
that's considered not syntactic.  Productions are considered syntactic
if all their expressions are syntactic.  Expressions are considered
syntactic if their output tree is composed only of terminal matches.
If there's any path to a non-terminal match, the entire expression,
and production are considered non syntactic.  e.g.:

#+begin_src peg
NotSyntactic <- Syntactic "!"
Syntactic    <- "a" "b" "c"
#+end_src

In the above example, there is no automatic space consumption injected
before the items of the sequence expression ~"a" "b" "c"~.  As all of
them are terminals.  And the ~NotSyntactic~ production contains non
terminal calls, which makes it non-syntactic.  Therefore, automatic
space handling will be enabled for ~NotSyntactic~ and disabled for
~Syntactic~

For *disabling* automatic space handling of an expression, prefix it
with the lexification operator ~#~. e.g.:

#+begin_src peg
Ordinal <- Decimal #('st' / 'nd' / 'rd' / 'th')^ord
Decimal <- ([1-9][0-9]*) / '0'
#+end_src

In the above expression, ~Decimal~ is considered syntactic, which
disables automatic space handling.  ~Ordinal~ is not syntactic because
it calls out to another production with a non-terminal.  So, automatic
space handling is enabled for that production.  However, between the
non-terminal and the choice with terminals, space handling is
disabled.  This is what is expected

| Input   | Result   |
|---------+----------|
| " 3rd"  | succeeds |
| "50th"  | succeeds |
| "2 0th" | fails    |
| "2 th"  | fails    |

The first input succeeds because space consumption is automatically
added to the left of the call to the non terminal ~Decimal~, as
~Ordinal~ is not syntactic.  But, because the expression that follows
the non terminal is marked with the lexification operator, automatic
space handling won't be injected between the call to the non terminal
and the ordered choice with the syntactic suffixed ~st~, ~nd~, ~rd~,
and ~th~.

*** Error reporting with Labels

*** Import system

Productions of one grammar can be imported from another one.  That
allows reusing rules and delivering more consolidate grammar files and
more powerful parser generated at the end.

#+begin_src peg
  // file player.peg
  @import AddrSpec from "./rfc5322.peg"

  Player <- "Name:" Name "," "Score:" Number "," "Email:" AddrSpec
  Name   <- [a-zA-Z ]+
  Number <- [0-9]+
  // ... elided for simplicity

#+end_src

#+begin_src peg
  // file rfc5322.peg
  // https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1

  // ... elided for simplicity
  AddrSpec  <- LocalPart "@" Domain
  LocalPart <- DotAtom / QuotedString / ObsLocalPart
  Domain    <- DotAtom / DomainLiteral / ObsDomain
  // ... elided for simplicity
#+end_src

The above example illustrates that a rather complete email parser can
be used in other grammars using imports.  Behind the scenes, the
~AddrSpec~ rule and all its dependencies have been merged into the
~player.peg~ grammar.

* Generator Options
** Go

The Go code generator provides the following additional knobs to the
command line:

 * ~-go-package~: allows customizing what goes in the ~package~
   directive that starts each Go file.

 * ~go-prefix~: allows customizing structs generated prefixing what is
   passed to this option.  This is especially useful if there are two
   grammars to be parsed in the same package.  At least one will need
   a prefix, so the generic ~Parser~ name doesn't collide. e.g.:
   ~-go-prefix Tiny~ would generate a ~TinyParser~ struct, a
   ~NewTinyParser~ constructor, etc.

* Development

** Running the test suite

*** Generate Parsers

Both the examples and end to end tests need parsers to be generated
before tests can run successfully.  So these two commands are
required:

#+begin_src shell
  go generate ./...
  go test ./... -v
#+end_src

* Roadmap

 * [-] ???: [Go Lang] Decode output trees into structs
 * [ ] MID: import productions from other grammars: Complicates the
   deserialization I guess, so goes after that's working
 * [ ] MID: Build and display call graph for debugging purposes.
   Needs to visualize the backtracking and mark errors in red
 * [ ] MID: Python Code Generator
 * [ ] MID: Java Script Code Generator
 * [ ] BIG: Bootstrap off hand written parser, so grammar writters can
   take advantage of the features baked into the parser generator
