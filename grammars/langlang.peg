// The package `langlang_syntax` aims to implement the following
// syntax that is based on Parsing Expression Grammars with additional
// conservative extensions, such as an import system and automatic
// white space handling.

// Hierarchical syntax
Grammar     <- Import* Definition* EOF^eof
Import      <- "@import" Identifier^MissingImportName ("," Identifier)* "from"^MissingImportFrom Literal^MissingImportSrc
Definition  <- Identifier LEFTARROW Expression // this always succeeds, there's no point in labeling

Expression  <- Sequence ("/" Sequence)*
Sequence    <- Prefix*
Prefix      <- ("#" / "&" / "!")? Labeled
Labeled     <- Suffix #(([^⇑] Identifier^MissingLabel)?)
Suffix      <- Primary ("?" / "*" / "+" / Superscript)?
Primary     <- Identifier !LEFTARROW
             / "(" Expression ")"^MissingClosingParen
             / List / Literal / Class / Any
List        <- "{" (!"}" Expression)* "}"^MissingClosingCurly

// Lexical syntax
Identifier  <- [a-zA-Z_][a-zA-Z0-9_]*
Literal     <- ['] #((!['] Char)* [']^MissingClosingSQuote)
             / ["] #((!["] Char)* ["]^MissingClosingDQuote)
Class       <- '[' #((!']' #Range)* ']'^MissingClosingBracket)
Range       <- #(Char '-' Char^MissingRightRange / Char)
Char        <- '\\' [nrt\-'"\[\]\\]
             / '\\' [0-2][0-7][0-7]
             / '\\' [0-7][0-7]?
             / !'\\' .
Any         <- "."
Superscript <- [¹²³⁴⁵⁶⁷⁸⁹]
LEFTARROW   <- '<-'

// Override the builtin spacing rule. Notice, it *must* be a lexical
// rule, otherwise it becomes an unbounded recursion
Spacing <- #(Comment / Space / EOL)*
Comment <- #('//' (!EOL .)* EOL)
Space   <- #(' ' / '\t')
EOL     <- #('\n' / '\r\n' / '\r')
EOF     <- !.

// Recovery expressions

MissingClosingParen    <-
MissingClosingCurly    <-
MissingClosingBracket  <-
MissingClosingSQuote   <-
MissingClosingDQuote   <-
MissingLabel           <- (!Primary .)*

MissingImportName <- (!("from" / Literal) .)*
MissingImportFrom <- (!Literal .)*
MissingImportSrc  <- (!"\n" .)*
