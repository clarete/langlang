# Parsing Expression Expression implementing the same `src/parser.rs'

# Hierarchical syntax
Grammar    <- _ (Definition / SemAction)+ EndOfFile
Definition <- Identifier LEFTARROW Expression^defexpr

Expression <- Sequence (SLASH Sequence)*
Sequence   <- Prefix*
Prefix     <- (AND / NOT)? Labeled
Labeled    <- Suffix (LABEL Identifier)?
Suffix     <- Primary (QUESTION / STAR / PLUS / Superscript)?
Primary    <- Identifier !(LEFTARROW / RIGHTARROW)
            / OPEN Expression CLOSE
            / List / Literal / Class / DOT
List       <- OPENC (!CLOSEC Expression)* CLOSEC

SemAction  <- SemExprPth RIGHTARROW SemExpr^semexpr
SemExprPth <- Identifier (SLASH (Decimal / Identifier)^exprpath)*
SemExpr    <- SemExpr¹ PLUS SemExpr²^semexpsum
            / SemExpr¹ MINUS SemExpr²^semexpsub
            / SemExpr² STAR SemExpr³^semexpmul
            / SemExpr² SLASH SemExpr³^semexpdiv
            / (MINUS / PLUS) SemExpr⁴^semexpunary
            / OPEN SemExpr¹^semexpexpr CLOSE^semexpcl
            / SemValue
            / SemCall
            / Identifier
SemValue   <- Number
            / Literal
            / Variable
            / SemDict
            / SemList

SemDict    <- OPENC SemDictItem (COMMA SemDictItem)* CLOSEC^acdictcl
SemDictItem <- SemValue COLON SemExpr^dictitemexpr
SemList    <- OPENC (SemExpr (COMMA SemExpr)*)? CLOSEC^aclistcl
SemCall    <- Identifier OPEN (SemExpr (COMMA SemExpr)*)? CLOSE^acfncl
Number     <- Hexadecimal / Decimal

# Lexical syntax
Identifier <- [a-zA-Z_][a-zA-Z0-9_]* _
Variable   <- '%' [0-9]+ _
Decimal    <- ([1-9][0-9]* / '0') _
Hexadecimal<- HEX [a-zA-Z0-9]+ _
Literal    <- SQUOTE (!SQUOTE Char)* SQUOTE _
            / DQUOTE (!DQUOTE Char)* DQUOTE _
Class      <- '[' (!']' Range)* ']'  _
Range      <- Char DASH Char / Char
Char       <- '\\' [nrt'"\[\]\\]
            / '\\' [0-2][0-7][0-7]
            / '\\' [0-7][0-7]?
            / !'\\' .
Superscript<- [¹²³⁴⁵⁶⁷⁸⁹] _

LEFTARROW  <- '<-' _
RIGHTARROW <- '->' _
SLASH      <- '/'  _
MINUS      <- '-'  _
AND        <- '&'  _
NOT        <- '!'  _
QUESTION   <- '?'  _
STAR       <- '*'  _
PLUS       <- '+'  _
OPEN       <- '('  _
CLOSE      <- ')'  _
OPENC      <- '{'  _
CLOSEC     <- '}'  _
DOT        <- '.'  _
COMMA      <- ','  _
COLON      <- ':'  _
LABEL      <- [^⇑] _
SQUOTE     <- [']
DQUOTE     <- ["]
HEX        <- '0x'
DASH       <- '-'

# Spacing
_          <- (Space / Comment)*
Comment    <- '#' (!EndOfLine .)* EndOfLine
Space      <- ' ' / '\t' / EndOfLine
EndOfLine  <- '\r\n' / '\n' / '\r'
EndOfFile  <- !.

_           -> discard()
DASH        -> discard()
HEX         -> discard()
SQUOTE      -> discard()
DQUOTE      -> discard()
OPEN        -> discard()
CLOSE       -> discard()
OPENC       -> discard()
CLOSEC      -> discard()
COMMA       -> discard()
LEFTARROW   -> discard()
RIGHTARROW  -> discard()


Char        -> joinall()
Identifier  -> joinall()

Number      -> unwrap(%0)
Decimal     -> i64(joinall(), 10)
Hexadecimal -> i64(joinall(), 16)
