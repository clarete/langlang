// The package `langlang_syntax` aims to implement the following
// syntax that is based on Parsing Expression Grammars with additional
// conservative extensions, such as an import system and automatic
// white space handling.

// Hierarchical syntax
Grammar     <- Import* Definition+ EOF
Import      <- "@import" Identifier ("," Identifier)* "from" Literal
Definition  <- Identifier LEFTARROW Expression

Expression  <- Sequence ("/" Sequence)*
Sequence    <- Prefix*
Prefix      <- ("#" / "&" / "!")? Labeled
Labeled     <- Suffix #(([^⇑] Identifier)?)
Suffix      <- Primary ("?" / "*" / "+" / Superscript)?
Primary     <- Identifier !LEFTARROW
             / "(" Expression ")"
             / List / Literal / Class / "."
List        <- "{" (!"}" Expression)* "}"

// Lexical syntax
Identifier  <- [a-zA-Z_][a-zA-Z0-9_]*
Literal     <- ['] #((!['] Char)* ['])
             / ["] #((!["] Char)* ["])
Class       <- '[' #((!']' #Range)* ']')
Range       <- #(Char '-' Char / Char)
Char        <- '\\' [nrt'"\[\]\\]
             / '\\' [0-2][0-7][0-7]
             / '\\' [0-7][0-7]?
             / !'\\' .
Superscript <- [¹²³⁴⁵⁶⁷⁸⁹]
LEFTARROW   <- '<-'

// This adds the rule `Comment` to the builtin `WS` rule
WS       <- (SPC / Comment)*
Comment  <- #('//' (!EOL .)* EOL)
