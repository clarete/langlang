// This grammar uses the canonical PEG to define an extended PEG to
// provide the features required by LangLang. The introduced extensions
// are:
//
// * [X] Hex Chars: Declare characters with hexadecimal numbers. E.g.:
//       \x20 is the space char.
//
// * [X] Quiet Operator: Mark items to not be included in the parse
//       tree. Doesn't influence the match at all.
//
// * [X] Capture Block: Manually mark Capture blocks. Useful for
//       capturing Terminals together and ignore Non-Terminals.

// Hierarchical syntax
Grammar    <- Spacing Definition+ EndOfFile
Definition <- Identifier LEFTARROW Expression

Expression <- Sequence (SLASH Sequence)*
Sequence   <- Prefix*
Prefix     <- (AND / NOT / QUIET)? Suffix
Suffix     <- Primary (QUESTION / STAR / PLUS)?
Primary    <- Identifier !LEFTARROW
            / OPEN Expression CLOSE
            / Capture           // Capture Block Extension
            / Literal / Class / DOT
Capture    <- OPCB Expression CLCB

// Lexical syntax
Identifier <- IdentStart IdentCont* Spacing
IdentStart <- [a-zA-Z_]
IdentCont  <- IdentStart / [0-9]

Literal    <- ['] (!['] Char)* ['] Spacing
            / ["] (!["] Char)* ["] Spacing
Class      <- '[' (!']' Range)* ']' Spacing
Range      <- Char '-' Char / Char
Char       <- '\\' [nrt'"\[\]\\]
            / '\\' [0-2][0-7][0-7]
            / '\\' [0-7][0-7]?
            // Hex-chars Extension
            / '\\x' [0-9a-fA-F]+
            / !'\\' .

LEFTARROW  <- '<-' Spacing
SLASH      <- '/' Spacing
AND        <- '&' Spacing
NOT        <- '!' Spacing
QUESTION   <- '?' Spacing
STAR       <- '*' Spacing
PLUS       <- '+' Spacing
OPEN       <- '(' Spacing
CLOSE      <- ')' Spacing
DOT        <- '.' Spacing
// Quiet Operator Extension
QUIET      <- ';' Spacing
// Capture Block Extension
OPCB       <- '%C{' Spacing
CLCB       <- '}' Spacing


Spacing    <- (Space / Comment)*
Comment    <- '//' (!EndOfLine .)* EndOfLine
Space      <- ' ' / '\t' / EndOfLine
EndOfLine  <- '\r\n' / '\n' / '\r'
EndOfFile  <- !.
