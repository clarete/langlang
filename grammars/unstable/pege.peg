# Hierarchical syntax
Grammar    <- Spacing (Definition / LLExp)+ EndOfFile
Definition <- Identifier LEFTARROW Expression

Expression <- Sequence (SLASH Sequence)*
Sequence   <- Prefix*
Prefix     <- (AND / NOT / LLQ)? Suffix
Suffix     <- Primary (QUESTION / STAR / PLUS)?
Primary    <- Identifier !LEFTARROW
            / OPEN Expression CLOSE
            / Literal / Class / DOT
            / LLExp

## Meta-{Import,Include,Capture}-Extension
LLExp      <- LLMOD ((LLIMPORT Literal)    /
                     (LLLT Identifier)     /
                     (LLCAP_OP Expression LLCL))

# Lexical syntax
Identifier <- IdentStart IdentCont* Spacing
IdentStart <- [a-zA-Z_]
IdentCont  <- IdentStart / [0-9]

Literal    <- ['] (!['] Char)* ['] Spacing
            / ["] (!["] Char)* ["] Spacing
Class      <- '[' (!']' Range)* ']' Spacing
Range      <- Char '-' Char / Char
Char       <- '\\' [nrt'"\[\]\\]
            / '\\' [0-2][0-7][0-7]
            / '\\' [0-7][0-7]?
            ## Hex-chars Extension  
            / '\\x' [0-9a-fA-F]+
            / !'\\' .

LEFTARROW  <- '<-' Spacing
SLASH      <- '/' Spacing
AND        <- '&' Spacing
NOT        <- '!' Spacing
QUESTION   <- '?' Spacing
STAR       <- '*' Spacing
PLUS       <- '+' Spacing
OPEN       <- '(' Spacing
CLOSE      <- ')' Spacing
DOT        <- '.' Spacing
## Meta-{Import,Include,Capture}-Extension
LLMOD      <- '%' Spacing
LLIMPORT   <- '%import' Spacing
LLLT       <- '<' Spacing
LLCAP_OP   <- 'C{' Spacing
LLCL       <- '}' Spacing
## Silence
LLQ        <- ':'

Spacing    <- (Space / Comment)*
Comment    <- '#' (!EndOfLine .)* EndOfLine
Space      <- ' ' / '\t' / EndOfLine
EndOfLine  <- '\r\n' / '\n' / '\r'
EndOfFile  <- !.
