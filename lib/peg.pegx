# This grammar is a direct extract from "Parsing Expression Grammars:
# A Recognition-Based Syntactic Foundation" by Brian Ford,
# 2004. Chapter 2.
#
# This is the definition of the canonical PEG Grammar written with
# PEGx. The feature present in PEGx that is missing in the bare PEG is
# the `Quiet` operator that allows selectively disabling value
# captures. This makes the parse tree smaller, which is good because
# it makes the output less complex and the parsing machine creates
# less objects, which makes things faster!

# Hierarchical syntax
Grammar    <- ;Spacing Definition+ ;EndOfFile
Definition <- Identifier ;LEFTARROW Expression

Expression <- Sequence (;SLASH Sequence)*
Sequence   <- Prefix*
Prefix     <- (AND / NOT / QUIET)? Suffix
Suffix     <- Primary (QUESTION / STAR / PLUS)?
Primary    <- Identifier !LEFTARROW
            / ;OPEN Expression ;CLOSE
            / Literal / Class / DOT

# Lexical syntax
Identifier <- ;IdentStart ;IdentCont* ;Spacing
IdentStart <- [a-zA-Z_]
IdentCont  <- ;IdentStart / [0-9]

Literal    <- ;['] (!['] Char)* ;['] ;Spacing
            / ;["] (!["] Char)* ;["] ;Spacing
Class      <- ;'[' (!']' Range)* ;']' ;Spacing
Range      <- Char '-' Char / Char
Char       <- '\\' [nrt'"\[\]\\]
            / '\\' [0-2][0-7][0-7]
            / '\\' [0-7][0-7]?
            / !'\\' .

LEFTARROW  <- ;'<-' ;Spacing
SLASH      <- ;'/' ;Spacing
AND        <- ;'&' ;Spacing
NOT        <- ;'!' ;Spacing
QUESTION   <- ;'?' ;Spacing
STAR       <- ;'*' ;Spacing
PLUS       <- ;'+' ;Spacing
OPEN       <- ;'(' ;Spacing
CLOSE      <- ;')' ;Spacing
DOT        <- ;'.' ;Spacing
QUIET      <- ;';' ;Spacing

Spacing    <- (;Space / Comment)*
Comment    <- ;'#' (!EndOfLine .)* ;EndOfLine
Space      <- ;' ' / ;'\t' / ;EndOfLine
EndOfLine  <- ;'\r\n' / ;'\n' / ;'\r'
EndOfFile  <- ;(!.)
