# This grammar uses extended PEG to define itself. Refer to pegx.peg
# to see the grammar that is used to parse this file.

# Hierarchical syntax
Grammar    <- Spacing %Definition+ EndOfFile
Definition <- %Identifier LEFTARROW^Arrow Expression^Exp

Expression <- %Sequence (SLASH %Sequence^Seq)*
Sequence   <- %Prefix*
Prefix     <- (%AND / %NOT)? %Labeled
Labeled    <- %Suffix %Label?
Suffix     <- %Primary (%QUESTION / %STAR / %PLUS)?
Primary    <- %BlockCapture
            / %CAPTURE? %Identifier !LEFTARROW
            / OPEN Expression CLOSE^Close
            / %Literal / %Class / %DOT
BlockCapture <- OPCB Expression^Exp CLCB^Block
Label        <- LABEL (Identifier !LEFTARROW)^Label

# Lexical syntax
Identifier <- %{ IdentStart IdentCont* } Spacing
IdentStart <- [a-zA-Z_]
IdentCont  <- IdentStart / [0-9]

Literal    <- ['] (!['] %Char)* [']^SingleStr Spacing
            / ["] (!["] %Char)* ["]^DoubleStr Spacing
Class      <- '[' (!']' %Range)* ']'^Class Spacing
Range      <- %Char '-' %Char / %Char
Char       <- %{ '\\' [nrt'"\[\]\\]^Special }
            / %{ '\\' [0-2][0-7][0-7]^TSS }
            / %{ '\\' [0-7]^Ss[0-7]? }
            ## Hex-chars Extension  
            / %{ '\\x' [0-9a-fA-F]+^Hex }
            / %{ !'\\' .^Char }

LABEL      <- '^'
LEFTARROW  <- '<' '-'^ArrowDash Spacing
SLASH      <- '/' Spacing
AND        <- '&' Spacing
NOT        <- '!' Spacing
QUESTION   <- '?' Spacing
STAR       <- '*' Spacing
PLUS       <- '+' Spacing
OPEN       <- '(' Spacing
CLOSE      <- ')' Spacing
DOT        <- '.' Spacing
## Extensions
CAPTURE    <- '%' Spacing
OPCB       <- '%{' Spacing
CLCB       <- '}' Spacing

Spacing    <- (Space / %Comment)*
Comment    <- '#' %{ (!EndOfLine .)* } EndOfLine
Space      <- ' ' / '\t' / EndOfLine
EndOfLine  <- '\r\n' / '\n' / '\r'
EndOfFile  <- !.
