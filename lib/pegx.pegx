# This grammar uses extended PEG to define itself. Refer to pegx.peg
# to see the grammar that is used to parse this file.

# Hierarchical syntax
Grammar    <- ;Spacing Definition+ ;EndOfFile
Definition <- Identifier ;LEFTARROW Expression

Expression <- Sequence (;SLASH Sequence)*
Sequence   <- Prefix*
Prefix     <- (AND / NOT / QUIET)? Suffix
Suffix     <- Primary (QUESTION / STAR / PLUS)?
Primary    <- Identifier !LEFTARROW
            / ;OPEN Expression ;CLOSE
            / Capture
            / Literal / Class / DOT
Capture    <- ;OPCB Expression ;CLCB

# Lexical syntax
Identifier <- %C{ IdentStart IdentCont* } ;Spacing
IdentStart <- ;[a-zA-Z_]
IdentCont  <- ;IdentStart / ;[0-9]

Literal    <- ;['] (!['] Char)* ;['] ;Spacing
            / ;["] (!["] Char)* ;["] ;Spacing
Class      <- ;'[' (!']' Range)* ;']' ;Spacing
Range      <- Char '-' Char / Char
Char       <- '\\' [nrt'"\[\]\\]
            / '\\' [0-2][0-7][0-7]
            / '\\' [0-7][0-7]?
            ## Hex-chars Extension  
            / '\\x' [0-9a-fA-F]+
            / !'\\' .

LEFTARROW  <- ;'<-' ;Spacing
SLASH      <- ;'/' ;Spacing
AND        <- ;'&' ;Spacing
NOT        <- ;'!' ;Spacing
QUESTION   <- ;'?' ;Spacing
STAR       <- ;'*' ;Spacing
PLUS       <- ;'+' ;Spacing
OPEN       <- ;'(' ;Spacing
CLOSE      <- ;')' ;Spacing
DOT        <- ;'.' ;Spacing
## Extensions
QUIET      <- ;';' ;Spacing
OPCB       <- ;'%C{' ;Spacing
CLCB       <- ;'}' ;Spacing

Spacing    <- (;Space / Comment)*
Comment    <- ;'#' %C{ (!EndOfLine .)* } ;EndOfLine
Space      <- ;' ' / ;'\t' / ;EndOfLine
EndOfLine  <- ;'\r\n' / ;'\n' / ;'\r'
EndOfFile  <- !.
