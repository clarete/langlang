* langlang

  As a Language Toolkit, =langlang= aims to provide tools for
  interpreting and transforming data in lots of different formats.

  =langlang= currently provides a parsing system based on Parsing
  Expression Grammars implemented as a virtual machine inspired by
  =lpeg= from the Lua developers.

  The first feature on the way is the =match= command line tool that
  can be used to match text from input using either a built-in grammar
  or a user provided one. Example:

  #+begin_src shell
  $ ./match -g csv.bin -i file.csv
  (File
   (Line (Val "col0") (Val "col1"))
   (Line (Val "1") (Val "2"))
   (Line (Val "3") (Val "4")))
  #+end_src

** Build the project

   If you have the usual tools for compiling ~C~ programs, just type
   ~make~ within the root of the project and you're good to go. Run
   ~make test~ to generate the test binary.

** Usage

   In order to offer parses for lots of different formats, LangLang
   describes the supported formats with an extensible grammars system.

*** How to use existing Grammars

    Grammars must be compiled into bytecode before executed by the
    parsing machine. This will be automated in the future but for now,
    we need to execute the following command before executing a
    Grammar:

    #+begin_src
    python3 ./peg.py -c -g grammar-file.peg
    #+end_src

    The above step will generate the file =.bin=. Use that file with
    the parsing machine to parse input:

    #+begin_src
    ./match -g grammar.bin -i inputfile.txt
    #+end_src

    The build system will compile all grammars included in the ~lib~
    directory but you still need to do that for Grammar files that you
    write.

*** How to define new Grammars

    If there's a file format that =LangLang= doesn't currently support
    and you want to write a Grammar for it, you need to do so using an
    already supported Grammar. The most basic Grammar for writing
    other Grammars is the ~PEG~ grammar. Let's see how we could
    implement a very simple ~CSV~ parser:

    #+begin_src peg
File <- Line*
Line <- Val (;',' Val)* ;'\n'
Val  <- (![,\n] .)*
    #+end_src

    After saving the above content in the file ~csv.peg~ and compiling
    it into ~csv.bin~, the Parsing machine will be able to use it to
    process =CSV= files. There are other Grammars available but they
    need to have a compiler in order to be useful. Check out the
    section [[./docs/compilers.org][Available Grammars & Compilers]] to know more about the
    available Grammars.

    The semi-colon (~;~) is used before ~','~ and ~'\n'~ is used to
    prevent the parser from capturing the matched value. Which means
    that it will be matched and consumed but it won't show up in the
    parsing tree. Read more about [[./docs/capturevalues.org][Capturing values]].

** Design Documentation
   * [[./docs/parsingvm.org][Parsing Machine]]
   * [[./docs/capturevalues.org][Capture Values]]
