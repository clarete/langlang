* Parsing Machine
** Introduction

   This document describes the design and implementation of the
   parsing machine in the file =vm.c=.

   The original idea and design of the virtual machine came from the
   paper [[https://dl.acm.org/citation.cfm?id=1408683][A Parsing Machine for PEGs]] by Sérgio Medeiros & Roberto
   Ierusalimschy PUC-Rio, Rio de Janeiro, Brazil.

   The text matching semantics implemented in the machine were
   introduced in [[https://dl.acm.org/citation.cfm?id=964011][Parsing expression grammars: a recognition-based
   syntactic foundation]] by Bryan Ford, MIT, Cambridge, MA, USA.

** Features
*** Matching
    * [X] Patterns
    * [X] Expressions
    * [X] Lists
*** Capture
    * [X] Patterns
    * [-] Lists (Exists but is broken)
*** Error Handling
    * [X] Farther Failure Position recording
    * [X] Error Labels
** Semantic Operations
*** Character
    * ~‘c’~: Matches a character
    * ~. (Any)~: Matches any element and fails if it's the end of
      the input
*** Concatenation
    * ~a b~: Concatenates two expressions to compose more complex
      ones
*** Ordered Choice
    * ~a / b~: Tries to match each pattern, backtracking the input
      before the next pattern.
*** Predicates
    * ~!a~: Predicate that fails if =a= succeeds and succeed if =a=
      fail.
    * ~&a~: Syntax sugar for ~!!a~.
*** Suffixes
    * ~a*~: Matches the pattern =a= zero or more times.
    * ~a?~: Syntax sugar for ~&ee / !e~.
** Machine Instructions
*** General Semantics
    * [X] Choice l [o]
    * [X] Commit l
    * [X] Fail
    * [X] FailTwice l
    * [X] Jump l
    * [X] Call l k (operator precedence)
    * [X] Return
    * [X] Halt
*** Char Matching
    * [X] Char c
    * [X] Any
*** Optimizations
    * [X] PartialCommit
    * [X] BackCommit l
    * [ ] TestChar l o
    * [ ] TestAny n o
    * [ ] Set i
    * [X] Span x y
*** List Matching
    * [X] Atom
    * [X] Open
    * [X] Close
*** Captures
    * [X] CapOpen
    * [X] CapClose
    * [X] Capchar
*** Error Handling
    * [X] Throw
** Bytecode Format
*** Basic Layout
    The bytecode file is comprised of the following sections:

    #+begin_src text
    A     B     C     D
    +-----+-----+-----+-----+
    + 16b | ... | 16b | ... |
    +-----+-----+-----+-----+
    ^     ^     ^     ^
    |     |     |     |--> D. Beginning of Code Section.
    |     |     |--------> C. Number of instructions in Code Section (range 0-65,535)
    |     |--------------> B. Begining of String Table
    +--------------------> A. Number of items in String Table (range 0-65,535)
    #+end_src
*** String Table
    #+begin_src text
    A     B    C     D    E
    +-----+----+-----+----+-----+
    + 16b | 8b | ... | 8b | ... |
    +-----+----+-----+----+-----+
    ^     ^    ^     ^    ^
    |     |    |     |    |--> E. 2nd string in the table
    |     |    |     |-------> D. Length of 2nd string in the table
    |     |    |-------------> C. 1st string in the table
    |     |------------------> B. Length of 1st string in the table
    |------------------------> A. Number of elements in the table
    #+end_src

    This section stores all the strings declared within the grammar as
    identifiers and literals.

    The first =16b= of the section contain the number of strings
    within the table. Each string within the table is comprised of its
    length within the first =8b= and the rest of the string
    follows. Because of the size of the length attribute (=uint8_t=),
    strings cannot be longer than 255 chars.

*** Code

    The first =16b= of the Code Section store the number of
    instructions in the Code Section. The rest of the section is
    filled with compiled patterns. The patterns are represented as
    sequences of instructions. Each instruction is =32b= long.

    #+begin_src text
    A     B     C     D
    +-----+-----+-----+-----+
    + 16b | 32b | 32b | ... |
    +-----+-----+-----+-----+
    ^     ^     ^     ^  
    |     |     |     |----> D. Nth instruction
    |     |     |----------> C. 2nd Instruction
    |     |----------------> B. 1st Instruction
    |----------------------> A. Number of instructions in Code Section.
    #+end_src

*** Instruction Format

    Each instruction is 32 bit long. The first 5 bits store the opcode
    and the other 27 bits store parameters for the instruction.  We
    have instructions that take 0, 1 or 2 parameters. Since there are
    only 5 bits for instructions, we can have at most 32 of them.

    The utility =OP_MASK()= can be used to read the opcode from a
    32bit instruction data. Each argument size introduces different
    functions.  They're Here are the types of arguments:

**** Instruction with 1 parameter (Eg.: Char x)

     #+begin_src text
     opcode    |Parameter #1
     ----------|------------------------------------------------------
     |0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|1|
     ----------|------------------------------------------------------
     [   0 - 5 |                                              6 - 32 ]
     [       5 |                                                  27 ]
     #+end_src

     * =SOPERAND0()= Read signed value
     * =UOPERAND0()= Read unsigned value

**** Instruction with 2 parameters (Eg.: TestChar 4 97)

     #+begin_src text
     opcode    | Parameter #1        | Parameter #2
     ----------|---------------------|--------------------------------
     |0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|1|
     ----------|---------------------|--------------------------------
     [   0 - 5 |              6 - 16 |                       17 - 32 ]
     [       5 |                  11 |                            16 ]
     #+end_src

     * =SOPERAND1()= Read first operand as signed value
     * =UOPERAND1()= Read first operand as unsigned values
     * =SOPERAND2()= Read second operand as signed value
     * =UOPERAND2()= Read second operand as unsigned value
** Other Design Choices

   The PEG VM implementation follows as close as possible the design
   established by the article referenced in the introduction.
   However, the design doesn't specify the implementation details of
   features that aren't related to text matching, like the
   implementation of SET, SPAN and how to capture the matches.

   Features that open must provide well defined functionality but
   don't have an implementation specification are documented in this
   section.

*** SPAN

    This is way to allow the implementation to match a range of
    characters like =a-z= instead of just expanding it to an ordered
    choice that is as big as the range E.g.: =a / b / ... / z=.

    The =OP_SPAN a b= instruction is the current way of implementing
    the semantics of =SPAN=. It takes two arguments =a= and =b= and
    compare them to the next char in the input stream =i= as follows:
    ~(a >= i) && (i <= b)~

    This improves on the simplest case of a single range. To represent
    classes with multiple ranges e.g.: =[a-zA-Z]= the compiler
    currently has to produce an ordered choice with one choice per
    range.

*** SET

    This feature isn't implemented yet. It's probably going to be
    implemented as a new instruction =OP_SET l= where =l= is the
    location of a set of chars stored in the string table.

*** Captures

    Besides being able to tell if an input matches PEG, the parsing
    machine should also be able to extract the matched values as a
    tree where the nodes are tagged with the name of the grammar rule
    they matched.

    Three instructions were added in order to support this feature:
    =OP_CAP_OPEN t l=, =OP_CAP_CLOSE t l= and =OP_CAP_CHAR=. The
    parameter =t= is a boolean flag where false means the capture is
    non terminal and true means it's a terminal. And =l= is the
    location of the identifier of the capture in the string table.

    The exact semantics and usage of captures is described in more
    detail in a separate document about [[./capturevalues.org][Capturing Values]].
